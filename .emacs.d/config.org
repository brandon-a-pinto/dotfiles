#+TITLE: Emacs Config
#+AUTHOR: Brandon Pinto
#+DESCRIPTION: Brandon's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#elpaca-package-manager][ELPACA PACKAGE MANAGER]]
- [[#evil-mode][EVIL MODE]]
- [[#keybindings][KEYBINDINGS]]
- [[#tweaks][TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#y-or-n][Y or N]]
  - [[#remove-backup-files][Remove Backup Files]]
  - [[#tab-width][Tab Width]]
  - [[#autopair][Autopair]]
  - [[#minibuffer-escape][Minibuffer Escape]]
- [[#theme][THEME]]
- [[#sudo-edit][SUDO EDIT]]
- [[#which-key][WHICH-KEY]]
- [[#all-the-icons][ALL-THE-ICONS]]
- [[#diminish][DIMINISH]]
- [[#projectile][PROJECTILE]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#dashboard][DASHBOARD]]
- [[#flycheck][FLYCHECK]]
- [[#company][COMPANY]]
- [[#lsp-mode][LSP-MODE]]
- [[#language-support][LANGUAGE SUPPORT]]
- [[#magit][MAGIT]]
- [[#diff-hl][DIFF-HL]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent-and-electric-pair][Disable Electric Indent and Electric Pair]]
  - [[#diminish-org-indent-mode][Diminish Org Indent Mode]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#dired][DIRED]]
- [[#treemacs][TREEMACS]]
- [[#perspective][PERSPECTIVE]]
- [[#doom-modeline][DOOM MODELINE]]
- [[#fonts][FONTS]]
- [[#ligatures][LIGATURES]]
- [[#vterm][VTERM]]
- [[#vterm-toggle][VTERM-TOGGLE]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#rainbow-delimeter][RAINBOW DELIMETER]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#transparency][TRANSPARENCY]]
- [[#user-info][USER INFO]]

* ELPACA PACKAGE MANAGER

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			:ref nil
			:files (:defaults (:exclude "extensions"))
			:build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
 (build (expand-file-name "elpaca/" elpaca-builds-directory))
 (order (cdr elpaca-order))
 (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	   ((zerop (call-process "git" nil buffer t "clone"
				 (plist-get order :repo) repo)))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (kill-buffer buffer)
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
;;(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
#+end_src

* EVIL MODE 

#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    (evil-mode)
    (evil-set-undo-system 'undo-redo))
(use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer magit))
    ;;(define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
    (evil-collection-init))
(use-package evil-tutor)
(with-eval-after-load 'evil-maps
  (define-key evil-insert-state-map (kbd "<C-tab>") 'tab-to-tab-stop)
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
  (setq org-return-follows-link  t)
#+end_src

* KEYBINDINGS

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  
  ;; set up 'SPC' as the global leader key
  (general-create-definer brandon/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  (brandon/leader-keys
    "SPC" '(counsel-M-x :wk "Counsel M-x")
    "f" '(:ignore t :wk "file")
    "f ." '(find-file :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files")
    "TAB TAB" '(comment-line :wk "Comment lines"))

  (brandon/leader-keys
    "b" '(:ignore t :wk "buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b d" '(dashboard-open :wk "Dashboard buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))

  (brandon/leader-keys
    "g" '(:ignore t :wk "magit")
    "g g" '(magit-status :wk "Status")
    "g h" '(magit-info :wk "Help"))

  (brandon/leader-keys
    "d" '(:ignore t :wk "dired")
    "d d" '(dired :wk "Open")
    "d j" '(dired-jump :wk "Jump to current")
    "d p" '(peep-dired :wk "Peep-dired"))

 (brandon/leader-keys
    "h" '(:ignore t :wk "help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h t" '(load-theme :wk "Load theme")
    "h r r" '(reload-init-file :wk "Reload emacs config"))

  (brandon/leader-keys
    "m" '(:ignore t :wk "org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (brandon/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (brandon/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (brandon/leader-keys
    "t" '(:ignore t :wk "treemacs")
    "t t" '(treemacs :wk "Start/toggle")
    "t f" '(treemacs-select-window :wk "Focus")
    "t d" '(treemacs-select-directory :wk "Change dir")
    "t a" '(treemacs-add-project-to-workspace :wk "Add project")
    "t r" '(treemacs-remove-project-from-workspace :wk "Remove project")
    "t g" '(treemacs-git-mode :wk "Git mode"))
	
  (brandon/leader-keys
    "v" '(:ignore t :wk "vterm")
    "v t" '(vterm-toggle :wk "Start/Toggle"))

  (brandon/leader-keys
    "p" '(projectile-command-map :wk "projectile"))
	
  (brandon/leader-keys
    "w" '(:ignore t :wk "perspective")
    "w s" '(persp-switch t :wk "Switch")
    "w k" '(persp-kill :wk "Kill"))
)

#+end_src

* TWEAKS

** Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Y or N

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Remove Backup Files

#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

** Tab Width

#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src

** Autopair

#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (setq electric-pair-preserve-balance nil)
#+end_src

** Minibuffer Escape

#+begin_src  emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* THEME

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-palenight t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* SUDO EDIT

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (brandon/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* WHICH-KEY

#+begin_src emacs-lisp
(use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src

* ALL-THE-ICONS

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . all-the-icons-ibuffer-mode))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* DIMINISH

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* PROJECTILE

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src

* IVY (COUNSEL)

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-switch-buffer-transformer))
#+end_src

* DASHBOARD

#+begin_src emacs-lisp
(use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-icon-type 'all-the-icons)
    (setq dashboard-display-icons-p t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner 2)
    (setq dashboard-banner-logo-title "Welcome to Emacs!")
    (setq dashboard-items '((recents  . 5)
                            (agenda . 5)
                            (projects . 3)
                            (bookmarks . 3)))
    (setq dashboard-item-names '(("Agenda for the coming week:" . "Agenda:")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* FLYCHECK

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))

(use-package flycheck-color-mode-line
  :ensure t)

(use-package flycheck-inline
  :ensure t)
#+end_src

* COMPANY

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* LSP-MODE

#+begin_src emacs-lisp
(use-package lsp-mode
    :ensure t
    :config
    (lsp-enable-which-key-integration t))
#+end_src

* LANGUAGE SUPPORT

#+begin_src emacs-lisp
;; Java
(use-package lsp-java
    :config
    (add-hook 'java-mode-hook 'lsp))

;; Golang
(use-package go-mode
    :hook ((go-mode . lsp-deferred)
           (go-mode . company-mode))
    :config
    (require 'lsp-go)
    (setq lsp-go-analyses
          '((fieldalignment . t)
            (nilness        . t)
            (unusedwrite    . t)
            (unusedparams   . t)))
    (add-to-list 'exec-path "~/.go/bin")
    (setq gofmt-command "goimports"))
(add-hook 'before-save-hook 'gofmt-before-save)

;; Haskell
(use-package haskell-mode
    :config
    (add-hook 'haskell-mode-hook 'lsp))

;; Lua
(use-package lua-mode
    :config
    (add-hook 'lua-mode-hook 'lsp))

;; Clojure
(use-package clojure-mode
    :config
    (add-hook 'clojure-mode-hook 'lsp))

;; GDScript
(use-package gdscript-mode
    :config
    (add-hook 'gdscript-mode-hook 'lsp))

;; HTML + CSS + JS/TS
(use-package web-mode
    :ensure t
    :mode (("\\.js\\'" . web-mode)
           ("\\.jsx\\'" . web-mode)
           ("\\.ts\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.html\\'" . web-mode))
    :hook ((web-mode . lsp-deferred)
           (web-mode . company-mode))
    :commands web-mode)

;; GraphQL
(use-package graphql-mode
    :mode(("\\.graphqls\\'" . graphql-mode)))

;; YAML
(use-package yaml-mode
    :config
		(add-hook 'yaml-mode-hook 'lsp))

;; JSON
(use-package json-mode
    :ensure t
    :config
		(add-hook 'json-mode-hook 'lsp))

;; Protobuf
(use-package protobuf-mode
    :ensure t)

;; Editorconfig
(use-package editorconfig
    :ensure t
    :config (editorconfig-mode 1))

;; Prettier
(use-package prettier-js
    :config
    (add-hook 'js2-mode-hook 'prettier-js-mode)
		(add-hook 'web-mode-hook 'prettier-js-mode))
#+end_src

* MAGIT

#+begin_src emacs-lisp
(use-package magit
    :ensure t)
#+end_src

* DIFF-HL

#+begin_src emacs-lisp
(use-package diff-hl
    :ensure t
    :config (global-diff-hl-mode))
#+end_src

* ORG MODE

** Enabling Table of Contents

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent and Electric Pair

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
(setq org-edit-src-content-indentation 0)
(add-hook 'org-mode-hook (lambda () (electric-pair-local-mode -1)))
#+end_src

** Diminish Org Indent Mode

#+begin_src emacs-lisp
(eval-after-load 'org-indent '(diminish 'org-indent-mode))
#+end_src

** Source Code Block Tag Expansion

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

* HIGHLIGHT TODO

#+begin_src emacs-lisp 
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

* DIRED

#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

* TREEMACS

#+begin_src emacs-lisp
(use-package treemacs
    :ensure t
    :config
    (setq treemacs-is-never-other-window t)
    (treemacs-load-all-the-icons-with-workaround-font "Hermit"))
    (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))

(use-package treemacs-evil
    :ensure t)

(use-package treemacs-all-the-icons
    :ensure t)
#+end_src

* PERSPECTIVE

#+begin_src emacs-lisp
(use-package perspective
  :custom
  ;; NOTE! I have also set 'SCP =' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :init 
  (persp-mode)
  :config
  ;; Sets a file to write to when we save states
  (setq persp-state-default-file "~/.config/emacs/sessions"))

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
          (lambda ()
            (persp-ibuffer-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
(add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src

* DOOM MODELINE

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
    (setq doom-modeline-icon t)
    (setq doom-modeline-time-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-buffer-file-name-style 'relative-to-project)
    (setq doom-modeline-persp-name t)
    (setq doom-modeline-persp-icon t)
    (setq doom-modeline-width 5)
    (setq doom-modeline-height 35))
#+end_src

* FONTS

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "Fira Code Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Fira Code Nerd Font"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "Fira Code Nerd Font"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "Fira Code Nerd Font-12"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

* LIGATURES

#+begin_src emacs-lisp
(use-package ligature
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia and Fira Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode
                        '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                          ;; =:= =!=
                          ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                          ;; ;; ;;;
                          (";" (rx (+ ";")))
                          ;; && &&&
                          ("&" (rx (+ "&")))
                          ;; !! !!! !. !: !!. != !== !~
                          ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                          ;; ?? ??? ?:  ?=  ?.
                          ("?" (rx (or ":" "=" "\." (+ "?"))))
                          ;; %% %%%
                          ("%" (rx (+ "%")))
                          ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                          ;; |->>-||-<<-| |- |== ||=||
                          ;; |==>>==<<==<=>==//==/=!==:===>
                          ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                          "-" "=" ))))
                          ;; \\ \\\ \/
                          ("\\" (rx (or "/" (+ "\\"))))
                          ;; ++ +++ ++++ +>
                          ("+" (rx (or ">" (+ "+"))))
                          ;; :: ::: :::: :> :< := :// ::=
                          (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                          ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                          ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                          "="))))
                          ;; .. ... .... .= .- .? ..= ..<
                          ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                          ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                          ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                          ;; *> */ *)  ** *** ****
                          ("*" (rx (or ">" "/" ")" (+ "*"))))
                          ;; www wwww
                          ("w" (rx (+ "w")))
                          ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                          ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                          ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                          ;; << <<< <<<<
                          ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                          "-"  "/" "|" "="))))
                          ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                          ;; >> >>> >>>>
                          (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                          ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                          ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                       (+ "#"))))
                          ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                          ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                          ;; __ ___ ____ _|_ __|____|_
                          ("_" (rx (+ (or "_" "|"))))
                          ;; Fira code: 0xFF 0x12
                          ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                          ;; Fira code:
                          "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                          ;; The few not covered by the regexps.
                          "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

* VTERM

#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000))
(add-hook 'vterm-mode-hook (lambda() (display-line-numbers-mode 0)))
#+end_src

* VTERM-TOGGLE

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
  ;; kills the program as it would in most standard terminal programs.
  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.4))))
#+end_src

* RAINBOW MODE

#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode conf-mode)
#+end_src

* RAINBOW DELIMETER

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (go-mode . rainbow-delimiters-mode)
         (web-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))
#+end_src

* RELOAD EMACS

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* TRANSPARENCY

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 85))
#+end_src

* USER INFO

#+begin_src emacs-lisp
(setq user-full-name "Brandon Pinto"
      user-mail-address "brandon.a.pinto@protonmail.com")
#+end_src
